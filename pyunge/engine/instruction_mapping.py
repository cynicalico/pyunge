from pyunge.engine import base_instruction_set
from pyunge.engine.instruction_result import InstructionResult


class InstructionMapping:
    def __init__(self):
        self.mapping = {
            ord(' '): None,
            ord('!'): base_instruction_set.logical_not,
            ord('"'): base_instruction_set.toggle_stringmode,
            ord('#'): base_instruction_set.trampoline,
            ord('$'): base_instruction_set.pop,
            ord('%'): base_instruction_set.remainder,
            ord('&'): base_instruction_set.input_integer,
            ord('\''): base_instruction_set.fetch_character,
            ord('('): base_instruction_set.load_semantics,
            ord(')'): base_instruction_set.unload_semantics,
            ord('*'): base_instruction_set.multiply,
            ord('+'): base_instruction_set.add,
            ord(','): base_instruction_set.output_character,
            ord('-'): base_instruction_set.subtract,
            ord('.'): base_instruction_set.output_integer,
            ord('/'): base_instruction_set.divide,
            ord('0'): base_instruction_set.push_zero,
            ord('1'): base_instruction_set.push_one,
            ord('2'): base_instruction_set.push_two,
            ord('3'): base_instruction_set.push_three,
            ord('4'): base_instruction_set.push_four,
            ord('5'): base_instruction_set.push_five,
            ord('6'): base_instruction_set.push_six,
            ord('7'): base_instruction_set.push_seven,
            ord('8'): base_instruction_set.push_eight,
            ord('9'): base_instruction_set.push_niner,
            ord(':'): base_instruction_set.duplicate,
            ord(';'): None,
            ord('<'): base_instruction_set.go_west,
            ord('='): base_instruction_set.execute,
            ord('>'): base_instruction_set.go_east,
            ord('?'): base_instruction_set.go_away,
            ord('@'): base_instruction_set.stop,
            ord('A'): None,
            ord('B'): None,
            ord('C'): None,
            ord('D'): None,
            ord('E'): None,
            ord('F'): None,
            ord('G'): None,
            ord('H'): None,
            ord('I'): None,
            ord('J'): None,
            ord('K'): None,
            ord('L'): None,
            ord('M'): None,
            ord('N'): None,
            ord('O'): None,
            ord('P'): None,
            ord('Q'): None,
            ord('R'): None,
            ord('S'): None,
            ord('T'): None,
            ord('U'): None,
            ord('V'): None,
            ord('W'): None,
            ord('X'): None,
            ord('Y'): None,
            ord('Z'): None,
            ord('['): base_instruction_set.turn_left,
            ord('\\'): base_instruction_set.swap,
            ord(']'): base_instruction_set.turn_right,
            ord('^'): base_instruction_set.go_north,
            ord('_'): base_instruction_set.east_west_if,
            ord('`'): base_instruction_set.greater_than,
            ord('a'): base_instruction_set.push_ten,
            ord('b'): base_instruction_set.push_eleven,
            ord('c'): base_instruction_set.push_twelve,
            ord('d'): base_instruction_set.push_thirteen,
            ord('e'): base_instruction_set.push_fourteen,
            ord('f'): base_instruction_set.push_fifteen,
            ord('g'): base_instruction_set.get,
            ord('h'): base_instruction_set.go_high,
            ord('i'): base_instruction_set.input_file,
            ord('j'): base_instruction_set.jump_forward,
            ord('k'): base_instruction_set.iterate,
            ord('l'): base_instruction_set.go_low,
            ord('m'): base_instruction_set.high_low_if,
            ord('n'): base_instruction_set.clear_stack,
            ord('o'): base_instruction_set.output_file,
            ord('p'): base_instruction_set.put,
            ord('q'): base_instruction_set.quit,
            ord('r'): base_instruction_set.reflect,
            ord('s'): base_instruction_set.store_character,
            ord('t'): base_instruction_set.split,
            ord('u'): base_instruction_set.stack_under_stack,
            ord('v'): base_instruction_set.go_south,
            ord('w'): base_instruction_set.compare,
            ord('x'): base_instruction_set.absolute_delta,
            ord('y'): base_instruction_set.get_sysinfo,
            ord('z'): base_instruction_set.no_operation,
            ord('{'): base_instruction_set.begin_block,
            ord('|'): base_instruction_set.north_south_if,
            ord('}'): base_instruction_set.end_block,
            ord('~'): base_instruction_set.input_character,
        }

    def perform(self, ins, ip, fs):
        if ip.stringmode:
            if ins != ord('"'):
                ip.stack.push(ins)
                return InstructionResult.NONE, None

        f = self.mapping.get(ins)
        if f is not None:
            return f(self, ins, ip, fs)
        else:
            ip.reverse()
            return InstructionResult.NONE, None
